# Copyright 2019 Bytedance Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =============================================================================
FROM nvidia/cuda:10.0-devel-ubuntu16.04
ENV CUDA_VERSION=10.0
ARG REGION

RUN rm -f /tmp/pip.conf &&\
    echo -e '[global]\nindex-url = https://pypi.douban.com/simple' >> /tmp/pip.conf

RUN if [ "x$REGION" = "xchina" ]; then mkdir -p ~/.pip && mv /tmp/pip.conf ~/.pip/; fi

ENV USE_CUDA_PATH /usr/local/cuda:/usr/local/cudnn/lib64
ENV PATH /usr/local/cuda/bin:/usr/local/nvidia/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/cudnn/lib64:/usr/local/cuda/lib64:/usr/local/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/nccl/lib:$LD_LIBRARY_PATH
ENV LIBRARY_PATH /usr/local/cudnn/lib64:/usr/local/cuda/lib64:$LIBRARY_PATH

ENV BYTEPS_BASE_PATH /usr/local
ENV BYTEPS_PATH $BYTEPS_BASE_PATH/byteps
ENV BYTEPS_GIT_LINK https://github.com/bytedance/byteps

ARG CUDNN_VERSION=7.4.1.5-1+cuda$CUDA_VERSION

RUN apt-get update &&\
    apt-get install -y --allow-unauthenticated --allow-downgrades --allow-change-held-packages --no-install-recommends \
        build-essential \
        ca-certificates \
        git \
        curl \
        wget \
        vim \
        libopenblas-dev \
        liblapack-dev \
        libopencv-dev \
        python \
        python-dev \
        python-setuptools \
        libjemalloc-dev \
        graphviz \
        cmake \
        libjpeg-dev \
        libpng-dev \
        iftop \
        lsb-release \
        libcudnn7=${CUDNN_VERSION} \
        libnuma-dev \
        gcc-4.9 \
        g++-4.9 \
        gcc-4.9-base \
        python3 \
        python3-dev \
        python3-setuptools \
        python3-pip \
        openssh-server \
        libffi-dev \
        numactl \
        net-tools \
        less &&\
    pip3 install --upgrade pip

RUN pip3 --no-cache-dir install \
        matplotlib \
        scipy \
        sklearn \
        pandas \
        graphviz==0.9.0 \
        mxboard \
        tensorboard==1.0.0a6 \
        numpy==1.14.6 \
        awscli \
        clustershell

# Install NCCL
# ENV NCCL_VERSION=d7a58cfa5865c4f627a128c3238cc72502649881
ENV NCCL_VERSION=v2.4.7-1
ENV NCCL_DIR=nccl-2.4.7-1

RUN cd / && \
    wget -q -O - https://github.com/NVIDIA/nccl/archive/$NCCL_VERSION.tar.gz | tar -xzf - && \
    cd $NCCL_DIR && make -j src.build && make pkg.txz.build && \
    mkdir -p /usr/local/nccl && \
    tar -Jxf /$NCCL_DIR/build/pkg/txz/nccl*.txz -C /usr/local/nccl/ --strip-components 1 && \
    echo "/usr/local/nccl/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    ldconfig

WORKDIR /root/

RUN echo "/usr/local/cuda/lib64" >> /etc/ld.so.conf.d/cuda.conf && \
    echo "/usr/local/cudnn/lib64" >> /etc/ld.so.conf.d/cuda.conf && \
    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    ldconfig

RUN ln -sf /usr/local/cudnn/include/cudnn.h /usr/local/cuda/include/ && \
    ln -sf /usr/local/cudnn/lib64/libcudnn* /usr/local/cuda/lib64 &&\
    ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/libcuda.so && \
    ln -sf /usr/local/cuda/lib64/libcuda.so /usr/local/cuda/lib64/libcuda.so.1

RUN wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.0.tar.gz && \
    tar -zxvf openmpi-4.0.0.tar.gz && cd openmpi-4.0.0 && \
    ./configure && make -j $(nproc) && \
    make install && cd ~ && \  
    rm -rf openmpi-4.0.0 && ldconfig && rm openmpi-4.0.0.tar.gz


################################ install mxnet ################################
# install mxnet
ARG FRAMEWORK_VERSION=local
ENV FRAMEWORK_VERSION ${FRAMEWORK_VERSION}

COPY $FRAMEWORK_VERSION .

RUN pip3 install $FRAMEWORK_VERSION numpy==1.14.6 -U

################################ install horovod ################################
RUN HOROVOD_WITH_MXNET=1 HOROVOD_GPU_ALLREDUCE=NCCL pip3 install horovod --no-cache-dir


################################ install byteps ################################
ARG BPS_REMOTE=local
ARG BPS_COMMIT=local
ENV BPS_REMOTE ${BPS_REMOTE}
ENV BPS_COMMIT ${BPS_COMMIT}

RUN cd $BYTEPS_BASE_PATH &&\
    git clone --recurse-submodules $BPS_REMOTE && cd byteps && git reset --hard $BPS_COMMIT

# Pin GCC to 4.9 (priority 200) to compile correctly against TensorFlow, PyTorch, and MXNet.
RUN update-alternatives --install /usr/bin/gcc gcc $(readlink -f $(which gcc)) 100 && \
    update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc $(readlink -f $(which gcc)) 100 && \
    update-alternatives --install /usr/bin/g++ g++ $(readlink -f $(which g++)) 100 && \
    update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ $(readlink -f $(which g++)) 100
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 200 && \
    update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 200 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 200 && \
    update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ /usr/bin/g++-4.9 200

# Install BytePS
ARG BYTEPS_NCCL_LINK=shared
RUN cd $BYTEPS_PATH &&\
    BYTEPS_WITHOUT_PYTORCH=1 BYTEPS_WITHOUT_TENSORFLOW=1 python3 setup.py install &&\
    BYTEPS_WITHOUT_PYTORCH=1 BYTEPS_WITHOUT_TENSORFLOW=1 python3 setup.py bdist_wheel

RUN wget https://gist.githubusercontent.com/eric-haibin-lin/e2911467307418ec64333a112bd09707/raw/50eb0c1b908b2d1289e00f99a717241c12e3117a/hvd_ssh.sh

RUN pip3 install gluonnlp && python3 -c "import gluonnlp as nlp; nlp.model.get_model('bert_24_1024_16', dataset_name='book_corpus_wiki_en_uncased', pretrained=False); nlp.data.SQuAD('train', version='1.1'); nlp.data.SQuAD('dev', version='1.1');" && pip3 uninstall gluonnlp -y

# Remove GCC pinning
#RUN update-alternatives --remove gcc /usr/bin/gcc-4.9 && \
#    update-alternatives --remove x86_64-linux-gnu-gcc /usr/bin/gcc-4.9 && \
#    update-alternatives --remove g++ /usr/bin/g++-4.9 && \
#    update-alternatives --remove x86_64-linux-gnu-g++ /usr/bin/g++-4.9

RUN rm -rf /usr/local/cuda/lib64/libcuda.so && \
    rm -rf /usr/local/cuda/lib64/libcuda.so.1
